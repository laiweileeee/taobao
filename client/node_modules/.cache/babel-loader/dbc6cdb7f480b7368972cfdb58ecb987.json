{"ast":null,"code":"//selectors for when u need to pull state values \nimport { createSelector } from 'reselect'; //input selector \n\nconst selectCart = state => state.cart; //create selector\n\n\nexport const selectCartItems = createSelector( // 1st argument: array of input selectors\n[selectCart], // 2nd argument: function which takes in cart and returns the cartItems \ncart => cart.cartItems);\nexport const selectCartHidden = createSelector([selectCart], cart => cart.hidden);\nexport const selectCartItemsCount = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0));\nexport const selectCartTotal = createSelector([selectCartItems], cartItems => cartItems.reduce((accumulatedPrice, cartItem) => accumulatedPrice + cartItem.quantity * cartItem.price, 0));","map":{"version":3,"sources":["C:/Users/laiwe/taobao2/client/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","accumulatedPrice","price"],"mappings":"AAAA;AAEA,SAASA,cAAT,QAA+B,UAA/B,C,CAEC;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC,C,CAEA;;;AACD,OAAO,MAAMC,eAAe,GAAGJ,cAAc,EACzC;AACA,CAACC,UAAD,CAFyC,EAGzC;AACCE,IAAD,IAAUA,IAAI,CAACE,SAJ0B,CAAtC;AAOP,OAAO,MAAMC,gBAAgB,GAAGN,cAAc,CAC1C,CAACC,UAAD,CAD0C,EAEzCE,IAAD,IAAUA,IAAI,CAACI,MAF2B,CAAvC;AAKP,OAAO,MAAMC,oBAAoB,GAAGR,cAAc,CAC9C,CAACI,eAAD,CAD8C,EAE7CC,SAAD,IAAeA,SAAS,CAACI,MAAV,CACX,CAACC,mBAAD,EAAsBC,QAAtB,KACAD,mBAAmB,GAAGC,QAAQ,CAACC,QAFpB,EAGX,CAHW,CAF+B,CAA3C;AAQP,OAAO,MAAMC,eAAe,GAAGb,cAAc,CACzC,CAACI,eAAD,CADyC,EAExCC,SAAD,IAAeA,SAAS,CAACI,MAAV,CACX,CAACK,gBAAD,EAAmBH,QAAnB,KACAG,gBAAgB,GAAGH,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACI,KAFrC,EAGX,CAHW,CAF0B,CAAtC","sourcesContent":["//selectors for when u need to pull state values \r\n\r\nimport { createSelector } from 'reselect';\r\n\r\n //input selector \r\n const selectCart = (state) => state.cart;\r\n\r\n //create selector\r\nexport const selectCartItems = createSelector(\r\n    // 1st argument: array of input selectors\r\n    [selectCart],\r\n    // 2nd argument: function which takes in cart and returns the cartItems \r\n    (cart) => cart.cartItems\r\n)\r\n\r\nexport const selectCartHidden = createSelector(\r\n    [selectCart],\r\n    (cart) => cart.hidden\r\n)\r\n\r\nexport const selectCartItemsCount = createSelector(\r\n    [selectCartItems],\r\n    (cartItems) => cartItems.reduce(\r\n        (accumulatedQuantity, cartItem) => \r\n        accumulatedQuantity + cartItem.quantity, \r\n        0)\r\n)\r\n\r\nexport const selectCartTotal = createSelector(\r\n    [selectCartItems],\r\n    (cartItems) => cartItems.reduce(\r\n        (accumulatedPrice, cartItem) => \r\n        accumulatedPrice + cartItem.quantity * cartItem.price, \r\n        0)\r\n)"]},"metadata":{},"sourceType":"module"}