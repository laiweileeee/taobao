{"ast":null,"code":"import { createSelector } from 'reselect'; //Adding helper memoize package\n\nimport memoize from 'lodash.memoize';\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections); //converting object to array\n\nexport const selectCollectionForPreview = createSelector([selectCollections], //Object.keys transforms contents of object into an array\n// tenary operator to prevent null pointer exception\ncollections => collections ? Object.keys(collections).map(key => collections[key]) : []); //collectionUrlParam refers to 'hats', 'jackets' etc\n// Memoize: whenever this function gets called and receives collectionUrlParam, I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the same collectionUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just return the selector that's been stored.\n\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], // tenary operator to prevent null pointer exception\ncollections => collections ? collections[collectionUrlParam] : null));\nexport const IsCollectionFetching = createSelector([selectShop], shop => shop.isFecthing); //selector to see if collections exist, using !!shop.collections, gives a true if exist, false if it doesnt\n\nexport const IsCollectionsLoaded = createSelector([selectShop], //since default collections value is null, !!null gives FALSE\nshop => !!shop.collections);","map":{"version":3,"sources":["C:/Users/laiwe/taobao2/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectCollectionForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","IsCollectionFetching","isFecthing","IsCollectionsLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGL,cAAc,CAC3C,CAACE,UAAD,CAD2C,EAE3CE,IAAI,IAAIA,IAAI,CAACE,WAF8B,CAAxC,C,CAKP;;AACA,OAAO,MAAMC,0BAA0B,GAAGP,cAAc,CACpD,CAACK,iBAAD,CADoD,EAEpD;AACA;AACAC,WAAW,IAAIA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6BC,GAAG,IAAIL,WAAW,CAACK,GAAD,CAA/C,CAAH,GAA2D,EAJjC,CAAjD,C,CAOP;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGX,OAAO,CAAEY,kBAAD,IACpCb,cAAc,CACV,CAACK,iBAAD,CADU,EAET;AACDC,WAAW,IAAIA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IAHrD,CADqB,CAAhC;AAOP,OAAO,MAAMC,oBAAoB,GAAGd,cAAc,CAC9C,CAACE,UAAD,CAD8C,EAE9CE,IAAI,IAAIA,IAAI,CAACW,UAFiC,CAA3C,C,CAKP;;AACA,OAAO,MAAMC,mBAAmB,GAAGhB,cAAc,CAC7C,CAACE,UAAD,CAD6C,EAE7C;AACAE,IAAI,IAAI,CAAC,CAACA,IAAI,CAACE,WAH8B,CAA1C","sourcesContent":["import { createSelector } from 'reselect';\r\n//Adding helper memoize package\r\nimport memoize from 'lodash.memoize';\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n    [selectShop],\r\n    shop => shop.collections\r\n)\r\n\r\n//converting object to array\r\nexport const selectCollectionForPreview = createSelector(\r\n    [selectCollections],\r\n    //Object.keys transforms contents of object into an array\r\n    // tenary operator to prevent null pointer exception\r\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\r\n)\r\n\r\n//collectionUrlParam refers to 'hats', 'jackets' etc\r\n// Memoize: whenever this function gets called and receives collectionUrlParam, I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the same collectionUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just return the selector that's been stored.\r\nexport const selectCollection = memoize((collectionUrlParam) =>\r\n    createSelector(\r\n        [selectCollections],\r\n         // tenary operator to prevent null pointer exception\r\n        collections => collections ? collections[collectionUrlParam] : null\r\n    ));\r\n\r\nexport const IsCollectionFetching = createSelector(\r\n    [selectShop],\r\n    shop => shop.isFecthing\r\n)\r\n\r\n//selector to see if collections exist, using !!shop.collections, gives a true if exist, false if it doesnt\r\nexport const IsCollectionsLoaded = createSelector(\r\n    [selectShop],\r\n    //since default collections value is null, !!null gives FALSE\r\n    shop => !!shop.collections \r\n)"]},"metadata":{},"sourceType":"module"}