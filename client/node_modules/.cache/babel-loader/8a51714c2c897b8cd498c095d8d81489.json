{"ast":null,"code":"import { createSelector } from 'reselect'; //Adding helper memoize package\n\nimport memoize from 'lodash.memoize'; //mapping string value to respective id\n\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5\n};\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections); //collectionUrlParam refers to 'hats', 'jackets' etc\n// Memoize: whenever this function gets called and receives collectionUrlParam, I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the same collectionUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just return the selector that's been stored.\n\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], collections => collection[collectionUrlParam]));","map":{"version":3,"sources":["C:/Users/laiwe/taobao2/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","COLLECTION_ID_MAP","hats","sneakers","jackets","womens","mens","selectShop","state","shop","selectCollections","collections","selectCollection","collectionUrlParam","collection"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,IAAI,EAAE,CADgB;AAEtBC,EAAAA,QAAQ,EAAE,CAFY;AAGtBC,EAAAA,OAAO,EAAE,CAHa;AAItBC,EAAAA,MAAM,EAAE,CAJc;AAKtBC,EAAAA,IAAI,EAAE;AALgB,CAA1B;;AAQA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGX,cAAc,CAC3C,CAACQ,UAAD,CAD2C,EAE3CE,IAAI,IAAIA,IAAI,CAACE,WAF8B,CAAxC,C,CAKP;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGZ,OAAO,CAAEa,kBAAD,IACpCd,cAAc,CACV,CAACW,iBAAD,CADU,EAEVC,WAAW,IAAIG,UAAU,CAACD,kBAAD,CAFf,CADqB,CAAhC","sourcesContent":["import { createSelector } from 'reselect';\r\n//Adding helper memoize package\r\nimport memoize from 'lodash.memoize';\r\n\r\n//mapping string value to respective id\r\nconst COLLECTION_ID_MAP = {\r\n    hats: 1,\r\n    sneakers: 2,\r\n    jackets: 3,\r\n    womens: 4,\r\n    mens: 5\r\n}\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n    [selectShop],\r\n    shop => shop.collections\r\n)\r\n\r\n//collectionUrlParam refers to 'hats', 'jackets' etc\r\n// Memoize: whenever this function gets called and receives collectionUrlParam, I want to memoize the return of this function (in this case we return a selector). If this function gets called again with the same collectionUrlParam, don't rerun this function because we'll return the same value as last time, which we've memoized so just return the selector that's been stored.\r\nexport const selectCollection = memoize((collectionUrlParam) =>\r\n    createSelector(\r\n        [selectCollections],\r\n        collections => collection[collectionUrlParam]\r\n    ));"]},"metadata":{},"sourceType":"module"}