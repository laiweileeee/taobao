{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.util';\nexport const updateCollections = collectionsMap => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //Thunk that returns a function instead of an action object\n\nexport const fetchCollectionsStartAsync = collectionsMap => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections'); //dispatch the method to make isFetching: true\n\n    dispatch(fetchCollectionsStart()); //async fetch to firebase for snapshot, .then() awaits for the promise response\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot); //dispatch the action to reducer to set isFetching false, and attach collections: collectionsMap(payload)\n\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch);\n  };\n};","map":{"version":3,"sources":["C:/Users/laiwe/taobao2/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","updateCollections","collectionsMap","type","UPDATE_COLLECTIONS","payload","fetchCollectionsStart","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","FETCH_COLLECTIONS_SUCCESS","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,8BAA3D;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,cAAD,KAAqB;AAClDC,EAAAA,IAAI,EAAEL,eAAe,CAACM,kBAD4B;AAElDC,EAAAA,OAAO,EAAEH;AAFyC,CAArB,CAA1B;AAKP,OAAO,MAAMI,qBAAqB,GAAG,OAAO;AACxCH,EAAAA,IAAI,EAAEL,eAAe,CAACS;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIN,cAAD,KAAqB;AACxDC,EAAAA,IAAI,EAAEL,eAAe,CAACW,yBADkC;AAExDJ,EAAAA,OAAO,EAAEH;AAF+C,CAArB,CAAhC;AAKP,OAAO,MAAMQ,uBAAuB,GAAIC,YAAD,KAAmB;AACtDR,EAAAA,IAAI,EAAEL,eAAe,CAACc,yBADgC;AAEtDP,EAAAA,OAAO,EAAEM;AAF6C,CAAnB,CAAhC,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAIX,cAAD,IAAoB;AAC1D,SAAQY,QAAD,IAAc;AACjB,UAAMC,aAAa,GAAGhB,SAAS,CAACiB,UAAV,CAAqB,aAArB,CAAtB,CADiB,CAEjB;;AACAF,IAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR,CAHiB,CAKjB;;AACAS,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,QAAD,IAAc;AACnC,YAAMjB,cAAc,GAAGF,+BAA+B,CAACmB,QAAD,CAAtD,CADmC,CAEnC;;AACAL,MAAAA,QAAQ,CAACN,uBAAuB,CAACN,cAAD,CAAxB,CAAR;AACH,KAJD,EAIGkB,KAJH,CAISC,KAAK,IAAIP,QAJlB;AAKH,GAXD;AAYH,CAbM","sourcesContent":["import ShopActionTypes from './shop.types';\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.util';\r\n\r\nexport const updateCollections = (collectionsMap) => ({\r\n    type: ShopActionTypes.UPDATE_COLLECTIONS,\r\n    payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,    \r\n    payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = (errorMessage) => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\n//Thunk that returns a function instead of an action object\r\nexport const fetchCollectionsStartAsync = (collectionsMap) => {\r\n    return (dispatch) => {\r\n        const collectionRef = firestore.collection('collections');\r\n        //dispatch the method to make isFetching: true\r\n        dispatch(fetchCollectionsStart());\r\n\r\n        //async fetch to firebase for snapshot, .then() awaits for the promise response\r\n        collectionRef.get().then((snapshot) => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            //dispatch the action to reducer to set isFetching false, and attach collections: collectionsMap(payload)\r\n            dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        }).catch(error => dispatch);\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}