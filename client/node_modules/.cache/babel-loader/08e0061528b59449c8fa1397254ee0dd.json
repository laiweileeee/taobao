{"ast":null,"code":"//importing firebase utility library (Core)\nimport firebase from 'firebase/app'; //Firebase services\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyC0DFxv9zxMlk7QM0pHfiPQ0wmg_mEDDI4\",\n  authDomain: \"taobao-db.firebaseapp.com\",\n  databaseURL: \"https://taobao-db.firebaseio.com\",\n  projectId: \"taobao-db\",\n  storageBucket: \"taobao-db.appspot.com\",\n  messagingSenderId: \"603156310353\",\n  appId: \"1:603156310353:web:2b04e542fa15580e39cb70\",\n  measurementId: \"G-TD69KR23YH\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //if userAuth doesnt exist, exti from function\n  if (!userAuth) return; //else Query if the user exists, async request\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    //create a user using document REFERENCE object, not snapShot\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //set data in firebase\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } //always returns userRef as we might need it\n\n\n  return userRef;\n}; // USE THIS to add data to firebase non-manually \n// requests are async to firebase, make function async and await batch.commit() returns\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  //firebase always returns us a ref obj, even if does not exist on DB. use it to make a collection \n  // this returns a ref object with id: 'collectionKey', or in this case 'collections'\n  const collectionRef = firestore.collection(collectionKey); //batch single request into one big request, as firebase only can set 1 object at a time\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //generating a new random document from this collecction\n    const newDocRef = collectionRef.doc(); //setting the value of newDocRef to the obj given, ie. each object in the collection array\n\n    batch.set(newDocRef, obj);\n  }); //fire off batch request, returns a promise!\n\n  return await batch.commit();\n}; // get whole snapshot, convert to object plus additional properties\n\nconst convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    //.data() is important here to access the values in doc\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      // encodeURI converts string passed into a readable URL string. \n      //  Here: used to convert 'Hats' into sth readable?\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      item\n    };\n  });\n  console.log(transformedCollection);\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //Choosing google provider\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //Not sure what this does\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); //function that pop ups new window w google login when called\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider); //exporting library incase we need\n\nexport default firebase;","map":{"version":3,"sources":["C:/Users/laiwe/taobao2/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","item","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["//importing firebase utility library (Core)\r\nimport firebase from 'firebase/app';\r\n//Firebase services\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyC0DFxv9zxMlk7QM0pHfiPQ0wmg_mEDDI4\",\r\n    authDomain: \"taobao-db.firebaseapp.com\",\r\n    databaseURL: \"https://taobao-db.firebaseio.com\",\r\n    projectId: \"taobao-db\",\r\n    storageBucket: \"taobao-db.appspot.com\",\r\n    messagingSenderId: \"603156310353\",\r\n    appId: \"1:603156310353:web:2b04e542fa15580e39cb70\",\r\n    measurementId: \"G-TD69KR23YH\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    //if userAuth doesnt exist, exti from function\r\n    if (!userAuth) return;\r\n\r\n    //else Query if the user exists, async request\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n    const snapShot = await userRef.get();\r\n\r\n    if (!snapShot.exists) {\r\n        //create a user using document REFERENCE object, not snapShot\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n        try {\r\n            //set data in firebase\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            })\r\n        } catch (error) {\r\n            console.log('error creating user', error.message);\r\n        }\r\n    }\r\n    //always returns userRef as we might need it\r\n    return userRef;\r\n};\r\n\r\n// USE THIS to add data to firebase non-manually \r\n// requests are async to firebase, make function async and await batch.commit() returns\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    //firebase always returns us a ref obj, even if does not exist on DB. use it to make a collection \r\n    // this returns a ref object with id: 'collectionKey', or in this case 'collections'\r\n    const collectionRef = firestore.collection(collectionKey);\r\n\r\n    //batch single request into one big request, as firebase only can set 1 object at a time\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        //generating a new random document from this collecction\r\n        const newDocRef = collectionRef.doc();\r\n        //setting the value of newDocRef to the obj given, ie. each object in the collection array\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    //fire off batch request, returns a promise!\r\n    return await batch.commit()\r\n};\r\n\r\n// get whole snapshot, convert to object plus additional properties\r\nconst convertCollectionsSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        //.data() is important here to access the values in doc\r\n        const { title, items } = doc.data();\r\n        return {\r\n            // encodeURI converts string passed into a readable URL string. \r\n            //  Here: used to convert 'Hats' into sth readable?\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            item,\r\n        }\r\n    });\r\n    console.log(transformedCollection);\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n//Choosing google provider\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n//Not sure what this does\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\n//function that pop ups new window w google login when called\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n//exporting library incase we need\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}